// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

using Moq;
using System;
using System.Threading.Tasks;
using Microsoft.Data.Tools.TdsLib.Buffer;
using Microsoft.Data.Tools.TdsLib.IO.Connection;
using Microsoft.Data.Tools.TdsLib.IO.Connection.Tcp;
using Microsoft.Data.Tools.TdsLib.Messages;
using Microsoft.Data.Tools.TdsLib.Packets;
using Microsoft.Data.Tools.TdsLib.Payloads.Login7;
using Microsoft.Data.Tools.TdsLib.Payloads.PreLogin;
using Microsoft.Data.Tools.TdsLib.Tokens.Error;
using Xunit;

namespace Microsoft.Data.Tools.TdsLib.IntegrationTest
{
    public class TdsClientTest
    {
        [Fact]
        public async Task TestConnectWorkflow()
        {
            #region Mock Setup

            ByteBuffer PreLoginByteBuffer = new ByteBuffer(new byte[] { 0x12, 0x01, 0x00, 0x35, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x06, 0x01, 0x00, 0x25, 0x00, 0x01, 0x02, 0x00, 0x26, 0x00, 0x01, 0x03, 0x00, 0x27, 0x00, 0x04, 0x04, 0x00, 0x2B, 0x00, 0x01, 0x06, 0x00, 0x2C, 0x00, 0x01, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 });
            ByteBuffer Login7ByteBuffer = new ByteBuffer(new byte[] { 0x10, 0x01, 0x01, 0x03, 0x00, 0x00, 0x01, 0x00, 0xFB, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x74, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB0, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x09, 0x08, 0x00, 0x00, 0x5E, 0x00, 0x08, 0x00, 0x6E, 0x00, 0x00, 0x00, 0x6E, 0x00, 0x00, 0x00, 0x6E, 0x00, 0x0E, 0x00, 0x8A, 0x00, 0x22, 0x00, 0xCE, 0x00, 0x04, 0x00, 0xD3, 0x00, 0x06, 0x00, 0xDF, 0x00, 0x0A, 0x00, 0xF3, 0x00, 0x04, 0x00, 0xE8, 0xFA, 0xBB, 0x2B, 0x09, 0xFF, 0xFB, 0x00, 0x00, 0x00, 0xFB, 0x00, 0x00, 0x00, 0xFB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x00, 0x45, 0x00, 0x53, 0x00, 0x54, 0x00, 0x2D, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x56, 0x00, 0x54, 0x00, 0x64, 0x00, 0x73, 0x00, 0x4C, 0x00, 0x69, 0x00, 0x62, 0x00, 0x55, 0x00, 0x6E, 0x00, 0x69, 0x00, 0x74, 0x00, 0x54, 0x00, 0x65, 0x00, 0x73, 0x00, 0x74, 0x00, 0x61, 0x00, 0x7A, 0x00, 0x75, 0x00, 0x72, 0x00, 0x65, 0x00, 0x73, 0x00, 0x71, 0x00, 0x6C, 0x00, 0x2D, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00, 0x74, 0x00, 0x2E, 0x00, 0x64, 0x00, 0x61, 0x00, 0x74, 0x00, 0x61, 0x00, 0x62, 0x00, 0x61, 0x00, 0x73, 0x00, 0x65, 0x00, 0x2E, 0x00, 0x77, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x73, 0x00, 0x2E, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x74, 0x00, 0xD2, 0x00, 0x00, 0x00, 0xFF, 0x54, 0x00, 0x64, 0x00, 0x73, 0x00, 0x4C, 0x00, 0x69, 0x00, 0x62, 0x00, 0x75, 0x00, 0x73, 0x00, 0x5F, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x73, 0x00, 0x68, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00, 0x74, 0x00 });

            ByteBuffer PreLoginReplyByteBuffer = new ByteBuffer(new byte[] { 0x04, 0x01, 0x00, 0x31, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x06, 0x01, 0x00, 0x25, 0x00, 0x01, 0x02, 0x00, 0x26, 0x00, 0x01, 0x03, 0x00, 0x27, 0x00, 0x00, 0x04, 0x00, 0x27, 0x00, 0x01, 0x06, 0x00, 0x28, 0x00, 0x01, 0xFF, 0x0C, 0x00, 0x07, 0x6C, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01 });
            ByteBuffer Login7ReplyByteBuffer = new ByteBuffer(new byte[] { 0x04, 0x01, 0x00, 0xE7, 0x00, 0x00, 0x01, 0x00, 0xAD, 0x32, 0x00, 0x01, 0x74, 0x00, 0x00, 0x04, 0x14, 0x4D, 0x00, 0x69, 0x00, 0x63, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x73, 0x00, 0x6F, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x51, 0x00, 0x4C, 0x00, 0x20, 0x00, 0x53, 0x00, 0x65, 0x00, 0x72, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00, 0x0C, 0x00, 0x07, 0x6C, 0xE3, 0x84, 0x00, 0x14, 0x7F, 0x00, 0x00, 0x54, 0x2B, 0x3D, 0x00, 0x64, 0x00, 0x39, 0x00, 0x66, 0x00, 0x65, 0x00, 0x61, 0x00, 0x64, 0x00, 0x61, 0x00, 0x35, 0x00, 0x31, 0x00, 0x33, 0x00, 0x39, 0x00, 0x62, 0x00, 0x2E, 0x00, 0x74, 0x00, 0x72, 0x00, 0x32, 0x00, 0x39, 0x00, 0x33, 0x00, 0x31, 0x00, 0x2E, 0x00, 0x77, 0x00, 0x65, 0x00, 0x73, 0x00, 0x74, 0x00, 0x65, 0x00, 0x75, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x70, 0x00, 0x65, 0x00, 0x31, 0x00, 0x2D, 0x00, 0x61, 0x00, 0x2E, 0x00, 0x77, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x6B, 0x00, 0x65, 0x00, 0x72, 0x00, 0x2E, 0x00, 0x64, 0x00, 0x61, 0x00, 0x74, 0x00, 0x61, 0x00, 0x62, 0x00, 0x61, 0x00, 0x73, 0x00, 0x65, 0x00, 0x2E, 0x00, 0x77, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x73, 0x00, 0x2E, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x74, 0x00, 0x00, 0x00, 0xE3, 0x13, 0x00, 0x04, 0x04, 0x34, 0x00, 0x30, 0x00, 0x39, 0x00, 0x36, 0x00, 0x04, 0x34, 0x00, 0x30, 0x00, 0x39, 0x00, 0x36, 0x00, 0xFD, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 });

            bool preLoginSent = false;
            bool login7Sent = false;

            Mock<IConnection> connectionMock = new Mock<IConnection>();

            connectionMock.Setup(c => c.Options).Returns(new TcpConnectionOptions());

            connectionMock.Setup(c => c.SendData(It.IsNotNull<ByteBuffer>()))
                .Returns<ByteBuffer>((b) =>
                {
                    if (!preLoginSent)
                    {
                        if (b == PreLoginByteBuffer)
                        {
                            preLoginSent = true;
                        }
                        else
                        {
                            throw new InvalidOperationException("Pre Login invalid format");
                        }
                    }
                    else if (!login7Sent)
                    {
                        if (b == Login7ByteBuffer)
                        {
                            login7Sent = true;
                        }
                        else
                        {
                            throw new InvalidOperationException("Login7 invalid format");
                        }
                    }
                    else
                    {
                        throw new InvalidOperationException("Invalid state");
                    }

                    return Task.CompletedTask;
                });

            connectionMock.SetupSequence(c => c.ReceiveData())
                .Returns(Task.FromResult(PreLoginReplyByteBuffer))
                .Returns(Task.FromResult(Login7ReplyByteBuffer))
                .Throws<InvalidOperationException>();

            #endregion

            #region Initialize data

            TcpServerEndpoint dbServerEndpoint = new TcpServerEndpoint("azuresql-test.database.windows.net", 1433);

            Message preLoginMessage = new Message(PacketType.PreLogin) { Payload = new PreLoginPayload(true) };

            Login7Payload login7Payload = new Login7Payload()
            {
                Hostname = "TEST-ENV",
                ServerName = dbServerEndpoint.Hostname,
                AppName = "TdsLibUnitTest",
                Language = "us_english",
                Database = "test",
                ClientId = new ByteBuffer(new byte[] { 0xE8, 0xFA, 0xBB, 0x2B, 0x09, 0xFF })
            };

            login7Payload.TypeFlags.AccessIntent = OptionAccessIntent.ReadWrite;

            login7Payload.Options.ClientLcid = 0x00000809;
            login7Payload.Options.ClientPid = 0x00004440;
            login7Payload.Options.ClientProgVer = 0x00000000;
            login7Payload.Options.ClientTimeZone = 0x00000000;
            login7Payload.Options.ConnectionId = 0x00000000;
            login7Payload.Options.PacketSize = 0x00001000;
            login7Payload.Options.TdsVersion = TdsVersion.V7_4;

            Message login7Message = new Message(PacketType.Login7) { Payload = login7Payload };

            #endregion

            using TdsClient client = new TdsClient(connectionMock.Object);

            #region PreLogin Phase

            await client.MessageHandler.SendMessage(preLoginMessage);

            Message message = await client.MessageHandler.ReceiveMessage(b => new PreLoginPayload(b));

            #endregion

            #region TLS Handshake Phase

            await client.PerformTlsHandshake();

            #endregion

            #region Login Phase

            await client.MessageHandler.SendMessage(login7Message);

            await client.TokenStreamHandler.ReceiveTokensAsync((tokenEvent) =>
            {
                if (tokenEvent.Token is ErrorToken)
                {
                    throw new Xunit.Sdk.XunitException("ErrorToken received");
                }
            });

            #endregion

        }
    }
}
